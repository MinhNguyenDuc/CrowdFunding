'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/home/minhnguyenduc/Private/Work/Blockchain/CrowdFunding/pages/campaigns/new.js?entry';


var CampaignModel = require('../../models/campaign');

var CampaignNew = function (_Component) {
  (0, _inherits3.default)(CampaignNew, _Component);

  function CampaignNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, CampaignNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = CampaignNew.__proto__ || (0, _getPrototypeOf2.default)(CampaignNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      minimumContribution: '',
      title: '',
      description: '',
      errorMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts, result, campaignAddress;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _factory2.default.methods.createCampaign(_this.state.minimumContribution).send({
                  from: accounts[0]
                });

              case 8:
                result = _context.sent;
                campaignAddress = result.events.NewCampaignAddress.returnValues.contractAddress;

                _axios2.default.post('http://localhost:4000/campaigns', {
                  address: campaignAddress,
                  title: _this.state.title,
                  description: _this.state.description,
                  minimumContribution: _this.state.minimumContribution
                }).then(function (result) {
                  return console.log(result);
                });

                //newCampaign.save().then(console.log);

                //console.log(result);
                //console.log(campaignAddress);  


                _routes.Router.pushRoute('/');
                _context.next = 18;
                break;

              case 14:
                _context.prev = 14;
                _context.t0 = _context['catch'](2);

                _this.setState({ errorMessage: _context.t0.message });
                console.log(_context.t0);

              case 18:

                _this.setState({ loading: false });

              case 19:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 14]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(CampaignNew, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, 'Create a Campaign'), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 63
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 64
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }, 'Minimum Contribution'), _react2.default.createElement(_semanticUiReact.Input, {
        label: 'wei',
        labelPosition: 'right',
        value: this.state.minimumContribution,
        onChange: function onChange(event) {
          return _this3.setState({ minimumContribution: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      }, 'Title'), _react2.default.createElement(_semanticUiReact.Input, {
        placeholder: 'Campaign Title',
        value: this.state.title,
        onChange: function onChange(event) {
          return _this3.setState({ title: event.target.value });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      })), _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }, 'Description'), _react2.default.createElement(_semanticUiReact.TextArea, { name: 'content', id: 'editor', placeholder: 'Campain detail',
        onChange: function onChange(event) {
          return _this3.setState({ description: event.target.value });
        },
        value: this.state.description, __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Oops!', content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { loading: this.state.loading, primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 94
        }
      }, 'Create!')));
    }
  }]);

  return CampaignNew;
}(_react.Component);

exports.default = CampaignNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25Nb2RlbCIsInJlcXVpcmUiLCJDYW1wYWlnbk5ldyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwibWluaW11bUNvbnRyaWJ1dGlvbiIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJlcnJvck1lc3NhZ2UiLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJhY2NvdW50cyIsInJlc3VsdCIsImNhbXBhaWduQWRkcmVzcyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNyZWF0ZUNhbXBhaWduIiwic2VuZCIsImZyb20iLCJldmVudHMiLCJOZXdDYW1wYWlnbkFkZHJlc3MiLCJyZXR1cm5WYWx1ZXMiLCJjb250cmFjdEFkZHJlc3MiLCJwb3N0IiwiYWRkcmVzcyIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwicHVzaFJvdXRlIiwidDAiLCJtZXNzYWdlIiwic3RvcCIsIl94Iiwia2V5IiwidmFsdWUiLCJyZW5kZXIiLCJfdGhpczMiLCJjcmVhdGVFbGVtZW50IiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJlcnJvciIsIkZpZWxkIiwibGFiZWwiLCJsYWJlbFBvc2l0aW9uIiwib25DaGFuZ2UiLCJ0YXJnZXQiLCJwbGFjZWhvbGRlciIsIm5hbWUiLCJpZCIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7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